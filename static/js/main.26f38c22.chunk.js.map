{"version":3,"sources":["logo.svg","Components/ItemTypes.js","Components/Card/Card.jsx","Components/Container/AlgoContainer.jsx","Components/CanvasContainer/CanvasContainer.jsx","Constants.js","utils.js","Algorithms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","id","text","moveCard","findCard","deleteCard","processingOptions","updateCard","originalIndex","index","useDrag","item","type","ItemTypes","collect","monitor","isDragging","end","dropResult","getItem","droppedId","didDrop","drag","useDrop","accept","canDrop","hover","draggedId","overIndex","drop","opacity","ref","node","style","className","onClick","Object","keys","map","option","TextField","key","label","placeholder","toString","variant","onChange","event","console","log","target","value","Number","parseInt","InputLabelProps","shrink","marginTop","AlgoContainer","cards","setCards","atIndex","card","update","$splice","filter","c","indexOf","property","$set","CanvasContainer","resolveOpenCVErrorNumber","err","isNaN","cv","window","exceptionFromPtr","msg","ptr","split","Error","stack","replace","WrappedAlgorithms","_cannyEdgeDetection","src","dst","Canny","lowerThreshold","upperThreshold","sobelApertureSize","moreAccurateGradient","_histogramEqualization","cvtColor","COLOR_RGBA2GRAY","equalizeHist","_medianFilter","medianBlur","kernelSize","_convertRGBToGray","_simpleBinaryThresholding","threshold","threshVal","THRESH_BINARY","_otsuThresholding","THRESH_OTSU","_adaptiveThresholding","adaptiveThreshold","ADAPTIVE_THRESH_GAUSSIAN_C","C","executeWrappedAlgorithm","inputCanvas","outputCanvasID","functionToExecute","debug","document","getElementById","imread","Mat","imshow","delete","InitialCardStates","functionIDLookup","functionToReturn","App","useEffect","webcam","webcamRef","current","interval","setInterval","originalCanvas","getCanvas","currentCanvas","length","i","functionToRun","error","clearInterval","React","useRef","useState","logo","alt","audio","screenshotFormat","videoConstraints","width","height","facingMode","onUserMedia","DndProvider","backend","Backend","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26f38c22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* the react-dnd library being used allows you to define multiple containers. Each container can be\r\nconfigured to only accept a certain type of item being dropped. One item can have one or more types.\r\n*/\r\nexport default {\r\n    CARD: 'card',\r\n}\r\n","import React from \"react\";\r\nimport {useDrag, useDrop} from \"react-dnd\";\r\nimport ItemTypes from \"../ItemTypes\";\r\nimport './Card.css';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst Card = ({id, text, moveCard, findCard, deleteCard, processingOptions, updateCard}) => {\r\n    const originalIndex = findCard(id).index;\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {type: ItemTypes.CARD, id, originalIndex},\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const {id: droppedId, originalIndex} = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveCard(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.CARD,\r\n        canDrop: () => false,\r\n        hover({id: draggedId}) {\r\n            if (draggedId !== id) {\r\n                const {index: overIndex} = findCard(id);\r\n                moveCard(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n    const opacity = isDragging ? 0 : 1;\r\n    return (\r\n        <div\r\n            ref={node => drag(drop(node))}\r\n            style={{opacity}}\r\n            className={'card'}\r\n        >\r\n            {text}\r\n            <span\r\n                className={'delete-button'}\r\n                onClick={() => {\r\n                    deleteCard(id);\r\n                }}>\r\n                <p\r\n                    className=\"fa fa-trash\"\r\n                ></p>\r\n            </span>\r\n            <br/>\r\n            <div\r\n                className={\"hello\"}\r\n            >\r\n                {Object.keys(processingOptions).map((option) => {\r\n                    return (\r\n                        // // the basic variant is out of date but it has better performance compared to the above\r\n                        // <TextField id=\"standard-basic\" label={option} variant=\"outlined\"/>\r\n                        <TextField\r\n                            key={id + '-' + option}\r\n                            id={id + '-' + option}\r\n                            label={option}\r\n                            type={\"number\"}\r\n                            placeholder={processingOptions[option].toString()}\r\n                            variant=\"outlined\"\r\n                            onChange={(event) => {\r\n                                console.log(\r\n                                    `received a change with the value: ${event.target.value} of type ${typeof(event.target.value)} for property ${option}`);\r\n                                updateCard(\r\n                                    id, option, Number.parseInt(event.target.value)\r\n                                );\r\n                            }}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            style = {{\r\n                                marginTop: \"5px\",\r\n\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Card;","import React, {useState} from \"react\";\r\nimport {DndProvider, useDrop} from \"react-dnd\";\r\nimport Card from \"../Card/Card\";\r\nimport update from \"immutability-helper\";\r\nimport ItemTypes from \"../ItemTypes\";\r\n\r\nconst AlgoContainer = ({cards, setCards}) => {\r\n\r\n    const moveCard = (id, atIndex) => {\r\n        const {card, index} = findCard(id);\r\n        setCards(\r\n            update(cards, {\r\n                $splice: [[index, 1], [atIndex, 0, card]]\r\n            })\r\n        );\r\n    };\r\n\r\n    const deleteCard = (id) => {\r\n        const {card, index} = findCard(id);\r\n        console.log(`aiyoh ${id} kena delete`);\r\n        setCards(\r\n            update(cards, {\r\n                $splice: [[index, 1]]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findCard = id => {\r\n        const card = cards.filter(c => `${c.id}` === id)[0];\r\n        return {\r\n            card,\r\n            index: cards.indexOf(card)\r\n        };\r\n    };\r\n\r\n    const updateCard = (id, property,  value) => {\r\n        const {card, index} = findCard(id);\r\n        console.log(`got a value of ${value} for property ${property} in updateCard`);\r\n\r\n        setCards(\r\n            update(cards, {[index]: {processingOptions: {[property]:\r\n                    {$set: value}\r\n                }}\r\n            })\r\n        );\r\n    };\r\n\r\n    const [, drop] = useDrop({\r\n            accept: ItemTypes.CARD,\r\n            drop: () => {\r\n            }\r\n        }\r\n    );\r\n    return (\r\n        <>\r\n            <div ref={drop}\r\n                 className={\"drag-and-drop-container\"} >\r\n                <h2>Algorithms to run on input video (in order from top to bottom)</h2>\r\n                {cards.map(card => (\r\n                    <Card\r\n                        key={card.id}\r\n                        id={`${card.id}`}\r\n                        text={card.text}\r\n                        moveCard={moveCard}\r\n                        findCard={findCard}\r\n                        deleteCard={deleteCard}\r\n                        processingOptions={card.processingOptions}\r\n                        updateCard={updateCard}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nexport default AlgoContainer;","import React from \"react\";\r\nimport \"../../Constants\";\r\nimport {INTERMEDIATE_OUTPUT_PREFIX} from \"../../Constants\";\r\n\r\nconst CanvasContainer = ({cards}) => {\r\n\r\n    return (\r\n        <div className={\"daPipeline\"}>\r\n            {cards.map((card, index) => (\r\n                <canvas\r\n                    key={INTERMEDIATE_OUTPUT_PREFIX + index}\r\n                    id={INTERMEDIATE_OUTPUT_PREFIX + index}\r\n                >\r\n                </canvas>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nexport default CanvasContainer;","export const INTERMEDIATE_OUTPUT_PREFIX = \"intermediate-output-\";\r\nexport const DELAY = 50;","// convert openCV error number into error message\r\nexport function resolveOpenCVErrorNumber(err) {\r\n    if (typeof err === 'undefined') {\r\n        err = '';\r\n    } else if (typeof err === 'number') {\r\n        if (!isNaN(err)) {\r\n            if (typeof cv !== 'undefined') {\r\n                err = 'Exception: ' + window.cv.exceptionFromPtr(err).msg;\r\n            }\r\n        }\r\n    } else if (typeof err === 'string') {\r\n        let ptr = Number(err.split(' ')[0]);\r\n        if (!isNaN(ptr)) {\r\n            if (typeof cv !== 'undefined') {\r\n                err = 'Exception: ' + window.cv.exceptionFromPtr(ptr).msg;\r\n            }\r\n        }\r\n    } else if (err instanceof Error) {\r\n        err = err.stack.replace(/\\n/g, '<br>');\r\n    }\r\n    return(err);\r\n}","// contains image processing algorithms\r\nconst WrappedAlgorithms = {\r\n    _cannyEdgeDetection: function _cannyEdgeDetection(src, dst, processingOptions) {\r\n        window.cv.Canny(src, dst, processingOptions.lowerThreshold,\r\n            processingOptions.upperThreshold,\r\n            processingOptions.sobelApertureSize,\r\n            processingOptions.moreAccurateGradient);\r\n    },\r\n\r\n    _histogramEqualization: function _histogramEqualization(src, dst, processingOptions) {\r\n        window.cv.cvtColor(src, src, window.cv.COLOR_RGBA2GRAY, 0); // need to leave this here even if its grayscale for some reason otherwise will crash\r\n        window.cv.equalizeHist(src, dst);\r\n    },\r\n\r\n    _medianFilter: function _medianFilter(src, dst, processingOptions) {\r\n        window.cv.medianBlur(src, dst, processingOptions.kernelSize);\r\n    },\r\n\r\n    _convertRGBToGray: function _convertRGBToGray(src, dst, processingOptions) {\r\n        window.cv.cvtColor(src, dst, window.cv.COLOR_RGBA2GRAY, 0);\r\n    },\r\n\r\n    _simpleBinaryThresholding: function _binaryThresholding(src, dst, processingOptions) {\r\n        window.cv.threshold(src, dst, processingOptions.threshVal, 255, window.cv.THRESH_BINARY);\r\n    },\r\n\r\n    _otsuThresholding: function _otsuThresholding(src, dst, processingOptions) {\r\n        window.cv.cvtColor(src, src, window.cv.COLOR_RGBA2GRAY, 0); // need to leave this here even if its grayscale for some reason otherwise will crash\r\n        // thresh value does not matter for otsu,\r\n        // so a placeholder value of 69 is placed.\r\n        window.cv.threshold(src, dst, 69, 255, window.cv.THRESH_OTSU);\r\n    },\r\n\r\n    _adaptiveThresholding: function _adaptiveThresholding(src, dst, processingOptions) {\r\n        window.cv.cvtColor(src, src, window.cv.COLOR_RGBA2GRAY, 0);\r\n        window.cv.adaptiveThreshold(src, dst, 255, window.cv.ADAPTIVE_THRESH_GAUSSIAN_C, window.cv.THRESH_BINARY, processingOptions.kernelSize, processingOptions.C);\r\n    }\r\n};\r\n\r\nexport default WrappedAlgorithms;\r\n\r\nexport function executeWrappedAlgorithm(inputCanvas, outputCanvasID, processingOptions, functionToExecute) {\r\n    console.debug(`---- Executing algorithm: ${functionToExecute} ----`);\r\n    console.debug(\"showing some debug information for the algorithm to execute\");\r\n    console.debug(\"input canvas:\");\r\n    console.debug(inputCanvas);\r\n    console.debug(\"output canvas:\");\r\n    console.debug(document.getElementById(outputCanvasID));\r\n    console.debug(\"function to execute:\");\r\n    console.debug(functionToExecute);\r\n    console.debug(\"================\");\r\n    let src = window.cv.imread(inputCanvas);\r\n    let dst = new window.cv.Mat();\r\n\r\n    functionToExecute(src, dst, processingOptions);\r\n    window.cv.imshow(outputCanvasID, dst);\r\n\r\n    src.delete();\r\n    dst.delete();\r\n\r\n    return document.getElementById(outputCanvasID);\r\n}\r\n\r\nexport const InitialCardStates = [\r\n    {\r\n        id: 1,\r\n        text: \"RGB to Grayscale\",\r\n        processingOptions: {}\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Histogram Equalization\",\r\n        processingOptions: {}\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Simple Image Thresholding\",\r\n        processingOptions: {\r\n            threshVal: 127,\r\n        }\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Median Filtering\",\r\n        processingOptions: {\r\n            kernelSize: 5,\r\n        }\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Canny Edge Detection\",\r\n        processingOptions: {\r\n            lowerThreshold: 50,\r\n            upperThreshold: 100,\r\n            sobelApertureSize: 3,\r\n            moreAccurateGradient: false,\r\n        }\r\n    },\r\n    {\r\n        id: 6,\r\n        text: \"Otsu Binarization\",\r\n        processingOptions: {},\r\n    },\r\n    {\r\n        id: 7,\r\n        text: \"Adaptive Thresholding\",\r\n        processingOptions: {\r\n            kernelSize: 3,\r\n            C: 2,\r\n        },\r\n    }\r\n];\r\n\r\n// look up the function to run based on the id of the card.\r\nexport function functionIDLookup(id) {\r\n    let functionToReturn = () => {\r\n    };\r\n    switch (id) {\r\n        case 1: {\r\n            functionToReturn = WrappedAlgorithms._convertRGBToGray;\r\n            break;\r\n        }\r\n        case 2: {\r\n            functionToReturn = WrappedAlgorithms._histogramEqualization;\r\n            break;\r\n        }\r\n        case 3: {\r\n            functionToReturn = WrappedAlgorithms._simpleBinaryThresholding;\r\n            break;\r\n        }\r\n        case 4: {\r\n            functionToReturn = WrappedAlgorithms._medianFilter;\r\n            break;\r\n        }\r\n        case 5: {\r\n            functionToReturn = WrappedAlgorithms._cannyEdgeDetection;\r\n            break;\r\n        }\r\n        case 6: {\r\n            functionToReturn = WrappedAlgorithms._otsuThresholding;\r\n            break;\r\n        }\r\n        case 7: {\r\n            functionToReturn = WrappedAlgorithms._adaptiveThresholding;\r\n            break;\r\n        }\r\n        default: {\r\n        }\r\n    }\r\n    return functionToReturn;\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// for webcam\nimport Webcam from \"react-webcam\";\n\n// for cards and drag-and-drop\nimport {DndProvider} from 'react-dnd'\nimport Backend from 'react-dnd-html5-backend'\nimport AlgoContainer from \"./Components/Container/AlgoContainer\";\n\n// for the intermediate output\nimport CanvasContainer from \"./Components/CanvasContainer/CanvasContainer\";\n\n// for the image processing algorithms\nimport {INTERMEDIATE_OUTPUT_PREFIX, DELAY} from \"./Constants\";\nimport {resolveOpenCVErrorNumber} from \"./utils.js\";\nimport {executeWrappedAlgorithm, functionIDLookup, InitialCardStates} from \"./Algorithms\";\n\nfunction App() {\n    // life saviour: https://upmostly.com/tutorials/setinterval-in-react-components-using-hooks\n    useEffect(() => {\n        if (!window.webcam)\n            window.webcam = webcamRef.current;\n\n        if (window.cv)\n            console.log('opencv loaded');\n        else {\n            console.log('opencv not loaded, will exit');\n            return;\n        }\n\n        const interval = setInterval(() => {\n\n            const originalCanvas = window.webcam.getCanvas();\n\n            if (!originalCanvas) {\n                return;\n            }\n\n            // something like dequeueing\n            let currentCanvas = originalCanvas;\n            console.log(cards);\n            console.log(cards.length);\n            for (let i = 0; i < cards.length; i++) {\n                // console.log(i);\n                let card = cards[i];\n\n                // // for debug purposes\n                // console.log(\"----- CURRENT CARD STATUSES ----\");\n                // console.log(\"CURRENT CANVAS TO INPUT FROM:\");\n                // console.log(currentCanvas);\n                // console.log(\"CURRENT CANVAS TO OUTPUT TO:\");\n                // console.log(INTERMEDIATE_OUTPUT_PREFIX + i);\n                // console.log(\"CURRENT SET OF PROCESSING OPTIONS\");\n                // console.log(card.processingOptions);\n                // console.log(\"///////////\");\n\n                // do sth based on card id\n                try {\n                    let functionToRun = functionIDLookup(card.id);\n                    currentCanvas = executeWrappedAlgorithm(currentCanvas,\n                                            INTERMEDIATE_OUTPUT_PREFIX + i,\n                                            card.processingOptions,\n                                            functionToRun);\n                } catch (err) {\n                    console.error(`Error using algorithm of id ${card.id}, error message: ${resolveOpenCVErrorNumber(err)}`);\n                    // resolveOpenCVErrorNumber(err);\n                }\n            }\n\n        }, DELAY);\n\n        return () => clearInterval(interval);\n    });\n\n    const videoConstraints = {\n        width: 1280,\n        height: 720,\n        facingMode: \"user\"\n    };\n    const webcamRef = React.useRef(null);\n\n    let [cards, setCards] = useState(InitialCardStates);\n\n    // entry point for image processing\n    const onUserMedia = () => {\n        window.webcam = webcamRef.current;\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <div className={\"processing-interface\"}>\n                    {/* video pipeline shows the input from the camera detected and all intermediate outputs from each stage */}\n                    <div className={\"video-pipeline\"}>\n                        <h2>Video Input and Intermediate Outputs (in order from top to bottom)</h2>\n                        <Webcam\n                            audio={false}\n                            ref={webcamRef}\n                            screenshotFormat=\"image/jpeg\"\n                            videoConstraints={videoConstraints}\n                            onUserMedia={onUserMedia}\n                        />\n                        <CanvasContainer\n                            cards={cards}\n                        />\n                    </div>\n                    {/* DndProvider needed for drag and drop functionality in AlgoContainer */}\n                    <DndProvider backend={Backend}>\n                        <AlgoContainer\n                            cards={cards}\n                            setCards={setCards}\n                        />\n                    </DndProvider>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}